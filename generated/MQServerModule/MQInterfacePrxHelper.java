// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `mq_interface.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package MQServerModule;

public final class MQInterfacePrxHelper extends Ice.ObjectPrxHelperBase implements MQInterfacePrx
{
    private static final String __UploadFile_name = "UploadFile";

    public int UploadFile(String sFile, int pos, int num, byte[] filecontent)
    {
        return UploadFile(sFile, pos, num, filecontent, null, false);
    }

    public int UploadFile(String sFile, int pos, int num, byte[] filecontent, java.util.Map<String, String> __ctx)
    {
        return UploadFile(sFile, pos, num, filecontent, __ctx, true);
    }

    private int UploadFile(String sFile, int pos, int num, byte[] filecontent, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "UploadFile", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("UploadFile");
                    __delBase = __getDelegate(false);
                    _MQInterfaceDel __del = (_MQInterfaceDel)__delBase;
                    return __del.UploadFile(sFile, pos, num, filecontent, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_UploadFile(String sFile, int pos, int num, byte[] filecontent)
    {
        return begin_UploadFile(sFile, pos, num, filecontent, null, false, null);
    }

    public Ice.AsyncResult begin_UploadFile(String sFile, int pos, int num, byte[] filecontent, java.util.Map<String, String> __ctx)
    {
        return begin_UploadFile(sFile, pos, num, filecontent, __ctx, true, null);
    }

    public Ice.AsyncResult begin_UploadFile(String sFile, int pos, int num, byte[] filecontent, Ice.Callback __cb)
    {
        return begin_UploadFile(sFile, pos, num, filecontent, null, false, __cb);
    }

    public Ice.AsyncResult begin_UploadFile(String sFile, int pos, int num, byte[] filecontent, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_UploadFile(sFile, pos, num, filecontent, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_UploadFile(String sFile, int pos, int num, byte[] filecontent, Callback_MQInterface_UploadFile __cb)
    {
        return begin_UploadFile(sFile, pos, num, filecontent, null, false, __cb);
    }

    public Ice.AsyncResult begin_UploadFile(String sFile, int pos, int num, byte[] filecontent, java.util.Map<String, String> __ctx, Callback_MQInterface_UploadFile __cb)
    {
        return begin_UploadFile(sFile, pos, num, filecontent, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_UploadFile(String sFile, int pos, int num, byte[] filecontent, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__UploadFile_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __UploadFile_name, __cb);
        try
        {
            __result.__prepare(__UploadFile_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(sFile);
            __os.writeInt(pos);
            __os.writeInt(num);
            ByteSeqHelper.write(__os, filecontent);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_UploadFile(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __UploadFile_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean UploadFile_async(AMI_MQInterface_UploadFile __cb, String sFile, int pos, int num, byte[] filecontent)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__UploadFile_name);
            __r = begin_UploadFile(sFile, pos, num, filecontent, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __UploadFile_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean UploadFile_async(AMI_MQInterface_UploadFile __cb, String sFile, int pos, int num, byte[] filecontent, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__UploadFile_name);
            __r = begin_UploadFile(sFile, pos, num, filecontent, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __UploadFile_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __command_name = "command";

    public int command(String cmd, String param, Ice.StringHolder outmsg)
    {
        return command(cmd, param, outmsg, null, false);
    }

    public int command(String cmd, String param, Ice.StringHolder outmsg, java.util.Map<String, String> __ctx)
    {
        return command(cmd, param, outmsg, __ctx, true);
    }

    private int command(String cmd, String param, Ice.StringHolder outmsg, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "command", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("command");
                    __delBase = __getDelegate(false);
                    _MQInterfaceDel __del = (_MQInterfaceDel)__delBase;
                    return __del.command(cmd, param, outmsg, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_command(String cmd, String param)
    {
        return begin_command(cmd, param, null, false, null);
    }

    public Ice.AsyncResult begin_command(String cmd, String param, java.util.Map<String, String> __ctx)
    {
        return begin_command(cmd, param, __ctx, true, null);
    }

    public Ice.AsyncResult begin_command(String cmd, String param, Ice.Callback __cb)
    {
        return begin_command(cmd, param, null, false, __cb);
    }

    public Ice.AsyncResult begin_command(String cmd, String param, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_command(cmd, param, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_command(String cmd, String param, Callback_MQInterface_command __cb)
    {
        return begin_command(cmd, param, null, false, __cb);
    }

    public Ice.AsyncResult begin_command(String cmd, String param, java.util.Map<String, String> __ctx, Callback_MQInterface_command __cb)
    {
        return begin_command(cmd, param, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_command(String cmd, String param, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__command_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __command_name, __cb);
        try
        {
            __result.__prepare(__command_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(cmd);
            __os.writeString(param);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_command(Ice.StringHolder outmsg, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __command_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            outmsg.value = __is.readString();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __desc_name = "desc";

    public boolean desc(String sql, Ice.StringHolder set, Ice.StringHolder insertsql, Ice.StringHolder error)
    {
        return desc(sql, set, insertsql, error, null, false);
    }

    public boolean desc(String sql, Ice.StringHolder set, Ice.StringHolder insertsql, Ice.StringHolder error, java.util.Map<String, String> __ctx)
    {
        return desc(sql, set, insertsql, error, __ctx, true);
    }

    private boolean desc(String sql, Ice.StringHolder set, Ice.StringHolder insertsql, Ice.StringHolder error, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "desc", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("desc");
                    __delBase = __getDelegate(false);
                    _MQInterfaceDel __del = (_MQInterfaceDel)__delBase;
                    return __del.desc(sql, set, insertsql, error, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_desc(String sql)
    {
        return begin_desc(sql, null, false, null);
    }

    public Ice.AsyncResult begin_desc(String sql, java.util.Map<String, String> __ctx)
    {
        return begin_desc(sql, __ctx, true, null);
    }

    public Ice.AsyncResult begin_desc(String sql, Ice.Callback __cb)
    {
        return begin_desc(sql, null, false, __cb);
    }

    public Ice.AsyncResult begin_desc(String sql, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_desc(sql, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_desc(String sql, Callback_MQInterface_desc __cb)
    {
        return begin_desc(sql, null, false, __cb);
    }

    public Ice.AsyncResult begin_desc(String sql, java.util.Map<String, String> __ctx, Callback_MQInterface_desc __cb)
    {
        return begin_desc(sql, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_desc(String sql, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__desc_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __desc_name, __cb);
        try
        {
            __result.__prepare(__desc_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(sql);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_desc(Ice.StringHolder set, Ice.StringHolder insertsql, Ice.StringHolder error, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __desc_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            set.value = __is.readString();
            insertsql.value = __is.readString();
            error.value = __is.readString();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __execCmd_name = "execCmd";

    public int execCmd(String cmd, String sqlcode, String param, Ice.StringHolder set, Ice.StringHolder error)
    {
        return execCmd(cmd, sqlcode, param, set, error, null, false);
    }

    public int execCmd(String cmd, String sqlcode, String param, Ice.StringHolder set, Ice.StringHolder error, java.util.Map<String, String> __ctx)
    {
        return execCmd(cmd, sqlcode, param, set, error, __ctx, true);
    }

    private int execCmd(String cmd, String sqlcode, String param, Ice.StringHolder set, Ice.StringHolder error, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "execCmd", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("execCmd");
                    __delBase = __getDelegate(false);
                    _MQInterfaceDel __del = (_MQInterfaceDel)__delBase;
                    return __del.execCmd(cmd, sqlcode, param, set, error, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_execCmd(String cmd, String sqlcode, String param)
    {
        return begin_execCmd(cmd, sqlcode, param, null, false, null);
    }

    public Ice.AsyncResult begin_execCmd(String cmd, String sqlcode, String param, java.util.Map<String, String> __ctx)
    {
        return begin_execCmd(cmd, sqlcode, param, __ctx, true, null);
    }

    public Ice.AsyncResult begin_execCmd(String cmd, String sqlcode, String param, Ice.Callback __cb)
    {
        return begin_execCmd(cmd, sqlcode, param, null, false, __cb);
    }

    public Ice.AsyncResult begin_execCmd(String cmd, String sqlcode, String param, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_execCmd(cmd, sqlcode, param, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_execCmd(String cmd, String sqlcode, String param, Callback_MQInterface_execCmd __cb)
    {
        return begin_execCmd(cmd, sqlcode, param, null, false, __cb);
    }

    public Ice.AsyncResult begin_execCmd(String cmd, String sqlcode, String param, java.util.Map<String, String> __ctx, Callback_MQInterface_execCmd __cb)
    {
        return begin_execCmd(cmd, sqlcode, param, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_execCmd(String cmd, String sqlcode, String param, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__execCmd_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __execCmd_name, __cb);
        try
        {
            __result.__prepare(__execCmd_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(cmd);
            __os.writeString(sqlcode);
            __os.writeString(param);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_execCmd(Ice.StringHolder set, Ice.StringHolder error, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __execCmd_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            set.value = __is.readString();
            error.value = __is.readString();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean execCmd_async(AMI_MQInterface_execCmd __cb, String cmd, String sqlcode, String param)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__execCmd_name);
            __r = begin_execCmd(cmd, sqlcode, param, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __execCmd_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean execCmd_async(AMI_MQInterface_execCmd __cb, String cmd, String sqlcode, String param, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__execCmd_name);
            __r = begin_execCmd(cmd, sqlcode, param, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __execCmd_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __execProc_name = "execProc";

    public boolean execProc(String sql, String param, Ice.StringHolder set, Ice.StringHolder error)
    {
        return execProc(sql, param, set, error, null, false);
    }

    public boolean execProc(String sql, String param, Ice.StringHolder set, Ice.StringHolder error, java.util.Map<String, String> __ctx)
    {
        return execProc(sql, param, set, error, __ctx, true);
    }

    private boolean execProc(String sql, String param, Ice.StringHolder set, Ice.StringHolder error, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "execProc", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("execProc");
                    __delBase = __getDelegate(false);
                    _MQInterfaceDel __del = (_MQInterfaceDel)__delBase;
                    return __del.execProc(sql, param, set, error, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_execProc(String sql, String param)
    {
        return begin_execProc(sql, param, null, false, null);
    }

    public Ice.AsyncResult begin_execProc(String sql, String param, java.util.Map<String, String> __ctx)
    {
        return begin_execProc(sql, param, __ctx, true, null);
    }

    public Ice.AsyncResult begin_execProc(String sql, String param, Ice.Callback __cb)
    {
        return begin_execProc(sql, param, null, false, __cb);
    }

    public Ice.AsyncResult begin_execProc(String sql, String param, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_execProc(sql, param, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_execProc(String sql, String param, Callback_MQInterface_execProc __cb)
    {
        return begin_execProc(sql, param, null, false, __cb);
    }

    public Ice.AsyncResult begin_execProc(String sql, String param, java.util.Map<String, String> __ctx, Callback_MQInterface_execProc __cb)
    {
        return begin_execProc(sql, param, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_execProc(String sql, String param, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__execProc_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __execProc_name, __cb);
        try
        {
            __result.__prepare(__execProc_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(sql);
            __os.writeString(param);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_execProc(Ice.StringHolder set, Ice.StringHolder error, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __execProc_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            set.value = __is.readString();
            error.value = __is.readString();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean execProc_async(AMI_MQInterface_execProc __cb, String sql, String param)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__execProc_name);
            __r = begin_execProc(sql, param, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __execProc_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean execProc_async(AMI_MQInterface_execProc __cb, String sql, String param, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__execProc_name);
            __r = begin_execProc(sql, param, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __execProc_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __execSQL_name = "execSQL";

    public boolean execSQL(String sql, String param, Ice.StringHolder error)
    {
        return execSQL(sql, param, error, null, false);
    }

    public boolean execSQL(String sql, String param, Ice.StringHolder error, java.util.Map<String, String> __ctx)
    {
        return execSQL(sql, param, error, __ctx, true);
    }

    private boolean execSQL(String sql, String param, Ice.StringHolder error, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "execSQL", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("execSQL");
                    __delBase = __getDelegate(false);
                    _MQInterfaceDel __del = (_MQInterfaceDel)__delBase;
                    return __del.execSQL(sql, param, error, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_execSQL(String sql, String param)
    {
        return begin_execSQL(sql, param, null, false, null);
    }

    public Ice.AsyncResult begin_execSQL(String sql, String param, java.util.Map<String, String> __ctx)
    {
        return begin_execSQL(sql, param, __ctx, true, null);
    }

    public Ice.AsyncResult begin_execSQL(String sql, String param, Ice.Callback __cb)
    {
        return begin_execSQL(sql, param, null, false, __cb);
    }

    public Ice.AsyncResult begin_execSQL(String sql, String param, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_execSQL(sql, param, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_execSQL(String sql, String param, Callback_MQInterface_execSQL __cb)
    {
        return begin_execSQL(sql, param, null, false, __cb);
    }

    public Ice.AsyncResult begin_execSQL(String sql, String param, java.util.Map<String, String> __ctx, Callback_MQInterface_execSQL __cb)
    {
        return begin_execSQL(sql, param, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_execSQL(String sql, String param, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__execSQL_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __execSQL_name, __cb);
        try
        {
            __result.__prepare(__execSQL_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(sql);
            __os.writeString(param);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_execSQL(Ice.StringHolder error, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __execSQL_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            error.value = __is.readString();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean execSQL_async(AMI_MQInterface_execSQL __cb, String sql, String param)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__execSQL_name);
            __r = begin_execSQL(sql, param, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __execSQL_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean execSQL_async(AMI_MQInterface_execSQL __cb, String sql, String param, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__execSQL_name);
            __r = begin_execSQL(sql, param, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __execSQL_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __execSQLBatch_name = "execSQLBatch";

    public boolean execSQLBatch(String sqlblock, Ice.StringHolder error)
    {
        return execSQLBatch(sqlblock, error, null, false);
    }

    public boolean execSQLBatch(String sqlblock, Ice.StringHolder error, java.util.Map<String, String> __ctx)
    {
        return execSQLBatch(sqlblock, error, __ctx, true);
    }

    private boolean execSQLBatch(String sqlblock, Ice.StringHolder error, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "execSQLBatch", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("execSQLBatch");
                    __delBase = __getDelegate(false);
                    _MQInterfaceDel __del = (_MQInterfaceDel)__delBase;
                    return __del.execSQLBatch(sqlblock, error, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_execSQLBatch(String sqlblock)
    {
        return begin_execSQLBatch(sqlblock, null, false, null);
    }

    public Ice.AsyncResult begin_execSQLBatch(String sqlblock, java.util.Map<String, String> __ctx)
    {
        return begin_execSQLBatch(sqlblock, __ctx, true, null);
    }

    public Ice.AsyncResult begin_execSQLBatch(String sqlblock, Ice.Callback __cb)
    {
        return begin_execSQLBatch(sqlblock, null, false, __cb);
    }

    public Ice.AsyncResult begin_execSQLBatch(String sqlblock, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_execSQLBatch(sqlblock, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_execSQLBatch(String sqlblock, Callback_MQInterface_execSQLBatch __cb)
    {
        return begin_execSQLBatch(sqlblock, null, false, __cb);
    }

    public Ice.AsyncResult begin_execSQLBatch(String sqlblock, java.util.Map<String, String> __ctx, Callback_MQInterface_execSQLBatch __cb)
    {
        return begin_execSQLBatch(sqlblock, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_execSQLBatch(String sqlblock, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__execSQLBatch_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __execSQLBatch_name, __cb);
        try
        {
            __result.__prepare(__execSQLBatch_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(sqlblock);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_execSQLBatch(Ice.StringHolder error, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __execSQLBatch_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            error.value = __is.readString();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean execSQLBatch_async(AMI_MQInterface_execSQLBatch __cb, String sqlblock)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__execSQLBatch_name);
            __r = begin_execSQLBatch(sqlblock, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __execSQLBatch_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean execSQLBatch_async(AMI_MQInterface_execSQLBatch __cb, String sqlblock, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__execSQLBatch_name);
            __r = begin_execSQLBatch(sqlblock, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __execSQLBatch_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getConfigure_name = "getConfigure";

    public String getConfigure(String segment, String key)
    {
        return getConfigure(segment, key, null, false);
    }

    public String getConfigure(String segment, String key, java.util.Map<String, String> __ctx)
    {
        return getConfigure(segment, key, __ctx, true);
    }

    private String getConfigure(String segment, String key, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getConfigure", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getConfigure");
                    __delBase = __getDelegate(false);
                    _MQInterfaceDel __del = (_MQInterfaceDel)__delBase;
                    return __del.getConfigure(segment, key, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getConfigure(String segment, String key)
    {
        return begin_getConfigure(segment, key, null, false, null);
    }

    public Ice.AsyncResult begin_getConfigure(String segment, String key, java.util.Map<String, String> __ctx)
    {
        return begin_getConfigure(segment, key, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getConfigure(String segment, String key, Ice.Callback __cb)
    {
        return begin_getConfigure(segment, key, null, false, __cb);
    }

    public Ice.AsyncResult begin_getConfigure(String segment, String key, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getConfigure(segment, key, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getConfigure(String segment, String key, Callback_MQInterface_getConfigure __cb)
    {
        return begin_getConfigure(segment, key, null, false, __cb);
    }

    public Ice.AsyncResult begin_getConfigure(String segment, String key, java.util.Map<String, String> __ctx, Callback_MQInterface_getConfigure __cb)
    {
        return begin_getConfigure(segment, key, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getConfigure(String segment, String key, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getConfigure_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getConfigure_name, __cb);
        try
        {
            __result.__prepare(__getConfigure_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(segment);
            __os.writeString(key);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getConfigure(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getConfigure_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getFileCompressed_name = "getFileCompressed";

    /**
     * Read the specified file. If the read operation fails, the
     * operation throws {@link FileAccessException}. This operation may only
     * return fewer bytes than requested in case there was an
     * end-of-file condition.
     * 
     * @param path The pathname (relative to the data directory) for
     * the file to be read.
     * 
     * @param pos The file offset at which to begin reading.
     * 
     * @param num The number of bytes to be read.
     * 
     * @return A sequence containing the compressed file contents.
     * 
     **/
    public byte[] getFileCompressed(String path, int pos, int num, Ice.IntHolder iResult)
    {
        return getFileCompressed(path, pos, num, iResult, null, false);
    }

    /**
     * Read the specified file. If the read operation fails, the
     * operation throws {@link FileAccessException}. This operation may only
     * return fewer bytes than requested in case there was an
     * end-of-file condition.
     * 
     * @param path The pathname (relative to the data directory) for
     * the file to be read.
     * 
     * @param pos The file offset at which to begin reading.
     * 
     * @param num The number of bytes to be read.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return A sequence containing the compressed file contents.
     * 
     **/
    public byte[] getFileCompressed(String path, int pos, int num, Ice.IntHolder iResult, java.util.Map<String, String> __ctx)
    {
        return getFileCompressed(path, pos, num, iResult, __ctx, true);
    }

    private byte[] getFileCompressed(String path, int pos, int num, Ice.IntHolder iResult, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getFileCompressed", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getFileCompressed");
                    __delBase = __getDelegate(false);
                    _MQInterfaceDel __del = (_MQInterfaceDel)__delBase;
                    return __del.getFileCompressed(path, pos, num, iResult, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * Read the specified file. If the read operation fails, the
     * operation throws {@link FileAccessException}. This operation may only
     * return fewer bytes than requested in case there was an
     * end-of-file condition.
     * 
     * @param __cb The callback object for the operation.
     * @param path The pathname (relative to the data directory) for
     * the file to be read.
     * 
     * @param pos The file offset at which to begin reading.
     * 
     * @param num The number of bytes to be read.
     * 
     **/
    public Ice.AsyncResult begin_getFileCompressed(String path, int pos, int num)
    {
        return begin_getFileCompressed(path, pos, num, null, false, null);
    }

    /**
     * Read the specified file. If the read operation fails, the
     * operation throws {@link FileAccessException}. This operation may only
     * return fewer bytes than requested in case there was an
     * end-of-file condition.
     * 
     * @param __cb The callback object for the operation.
     * @param path The pathname (relative to the data directory) for
     * the file to be read.
     * 
     * @param pos The file offset at which to begin reading.
     * 
     * @param num The number of bytes to be read.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFileCompressed(String path, int pos, int num, java.util.Map<String, String> __ctx)
    {
        return begin_getFileCompressed(path, pos, num, __ctx, true, null);
    }

    /**
     * Read the specified file. If the read operation fails, the
     * operation throws {@link FileAccessException}. This operation may only
     * return fewer bytes than requested in case there was an
     * end-of-file condition.
     * 
     * @param __cb The callback object for the operation.
     * @param path The pathname (relative to the data directory) for
     * the file to be read.
     * 
     * @param pos The file offset at which to begin reading.
     * 
     * @param num The number of bytes to be read.
     * 
     **/
    public Ice.AsyncResult begin_getFileCompressed(String path, int pos, int num, Ice.Callback __cb)
    {
        return begin_getFileCompressed(path, pos, num, null, false, __cb);
    }

    /**
     * Read the specified file. If the read operation fails, the
     * operation throws {@link FileAccessException}. This operation may only
     * return fewer bytes than requested in case there was an
     * end-of-file condition.
     * 
     * @param __cb The callback object for the operation.
     * @param path The pathname (relative to the data directory) for
     * the file to be read.
     * 
     * @param pos The file offset at which to begin reading.
     * 
     * @param num The number of bytes to be read.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFileCompressed(String path, int pos, int num, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFileCompressed(path, pos, num, __ctx, true, __cb);
    }

    /**
     * Read the specified file. If the read operation fails, the
     * operation throws {@link FileAccessException}. This operation may only
     * return fewer bytes than requested in case there was an
     * end-of-file condition.
     * 
     * @param __cb The callback object for the operation.
     * @param path The pathname (relative to the data directory) for
     * the file to be read.
     * 
     * @param pos The file offset at which to begin reading.
     * 
     * @param num The number of bytes to be read.
     * 
     **/
    public Ice.AsyncResult begin_getFileCompressed(String path, int pos, int num, Callback_MQInterface_getFileCompressed __cb)
    {
        return begin_getFileCompressed(path, pos, num, null, false, __cb);
    }

    /**
     * Read the specified file. If the read operation fails, the
     * operation throws {@link FileAccessException}. This operation may only
     * return fewer bytes than requested in case there was an
     * end-of-file condition.
     * 
     * @param __cb The callback object for the operation.
     * @param path The pathname (relative to the data directory) for
     * the file to be read.
     * 
     * @param pos The file offset at which to begin reading.
     * 
     * @param num The number of bytes to be read.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getFileCompressed(String path, int pos, int num, java.util.Map<String, String> __ctx, Callback_MQInterface_getFileCompressed __cb)
    {
        return begin_getFileCompressed(path, pos, num, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getFileCompressed(String path, int pos, int num, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFileCompressed_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getFileCompressed_name, __cb);
        try
        {
            __result.__prepare(__getFileCompressed_name, Ice.OperationMode.Nonmutating, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(path);
            __os.writeInt(pos);
            __os.writeInt(num);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) A sequence containing the compressed file contents.
     * 
     **/
    public byte[] end_getFileCompressed(Ice.IntHolder iResult, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getFileCompressed_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            iResult.value = __is.readInt();
            byte[] __ret;
            __ret = ByteSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    /**
     * Read the specified file. If the read operation fails, the
     * operation throws {@link FileAccessException}. This operation may only
     * return fewer bytes than requested in case there was an
     * end-of-file condition.
     * 
     * @param __cb The callback object for the operation.
     * @param path The pathname (relative to the data directory) for
     * the file to be read.
     * 
     * @param pos The file offset at which to begin reading.
     * 
     * @param num The number of bytes to be read.
     * 
     **/
    public boolean getFileCompressed_async(AMI_MQInterface_getFileCompressed __cb, String path, int pos, int num)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFileCompressed_name);
            __r = begin_getFileCompressed(path, pos, num, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFileCompressed_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    /**
     * Read the specified file. If the read operation fails, the
     * operation throws {@link FileAccessException}. This operation may only
     * return fewer bytes than requested in case there was an
     * end-of-file condition.
     * 
     * @param __cb The callback object for the operation.
     * @param path The pathname (relative to the data directory) for
     * the file to be read.
     * 
     * @param pos The file offset at which to begin reading.
     * 
     * @param num The number of bytes to be read.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getFileCompressed_async(AMI_MQInterface_getFileCompressed __cb, String path, int pos, int num, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFileCompressed_name);
            __r = begin_getFileCompressed(path, pos, num, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFileCompressed_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getFileInfo_name = "getFileInfo";

    public boolean getFileInfo(String sFilePath, Ice.StringHolder sHelpInfo)
    {
        return getFileInfo(sFilePath, sHelpInfo, null, false);
    }

    public boolean getFileInfo(String sFilePath, Ice.StringHolder sHelpInfo, java.util.Map<String, String> __ctx)
    {
        return getFileInfo(sFilePath, sHelpInfo, __ctx, true);
    }

    private boolean getFileInfo(String sFilePath, Ice.StringHolder sHelpInfo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getFileInfo", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getFileInfo");
                    __delBase = __getDelegate(false);
                    _MQInterfaceDel __del = (_MQInterfaceDel)__delBase;
                    return __del.getFileInfo(sFilePath, sHelpInfo, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getFileInfo(String sFilePath)
    {
        return begin_getFileInfo(sFilePath, null, false, null);
    }

    public Ice.AsyncResult begin_getFileInfo(String sFilePath, java.util.Map<String, String> __ctx)
    {
        return begin_getFileInfo(sFilePath, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getFileInfo(String sFilePath, Ice.Callback __cb)
    {
        return begin_getFileInfo(sFilePath, null, false, __cb);
    }

    public Ice.AsyncResult begin_getFileInfo(String sFilePath, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFileInfo(sFilePath, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getFileInfo(String sFilePath, Callback_MQInterface_getFileInfo __cb)
    {
        return begin_getFileInfo(sFilePath, null, false, __cb);
    }

    public Ice.AsyncResult begin_getFileInfo(String sFilePath, java.util.Map<String, String> __ctx, Callback_MQInterface_getFileInfo __cb)
    {
        return begin_getFileInfo(sFilePath, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getFileInfo(String sFilePath, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFileInfo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getFileInfo_name, __cb);
        try
        {
            __result.__prepare(__getFileInfo_name, Ice.OperationMode.Nonmutating, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(sFilePath);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getFileInfo(Ice.StringHolder sHelpInfo, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getFileInfo_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            sHelpInfo.value = __is.readString();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getFileInfo_async(AMI_MQInterface_getFileInfo __cb, String sFilePath)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFileInfo_name);
            __r = begin_getFileInfo(sFilePath, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFileInfo_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getFileInfo_async(AMI_MQInterface_getFileInfo __cb, String sFilePath, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFileInfo_name);
            __r = begin_getFileInfo(sFilePath, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFileInfo_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getFileInfoSeq_name = "getFileInfoSeq";

    public boolean getFileInfoSeq(String sPath, Ice.StringHolder sHelpInfo)
    {
        return getFileInfoSeq(sPath, sHelpInfo, null, false);
    }

    public boolean getFileInfoSeq(String sPath, Ice.StringHolder sHelpInfo, java.util.Map<String, String> __ctx)
    {
        return getFileInfoSeq(sPath, sHelpInfo, __ctx, true);
    }

    private boolean getFileInfoSeq(String sPath, Ice.StringHolder sHelpInfo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getFileInfoSeq", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getFileInfoSeq");
                    __delBase = __getDelegate(false);
                    _MQInterfaceDel __del = (_MQInterfaceDel)__delBase;
                    return __del.getFileInfoSeq(sPath, sHelpInfo, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getFileInfoSeq(String sPath)
    {
        return begin_getFileInfoSeq(sPath, null, false, null);
    }

    public Ice.AsyncResult begin_getFileInfoSeq(String sPath, java.util.Map<String, String> __ctx)
    {
        return begin_getFileInfoSeq(sPath, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getFileInfoSeq(String sPath, Ice.Callback __cb)
    {
        return begin_getFileInfoSeq(sPath, null, false, __cb);
    }

    public Ice.AsyncResult begin_getFileInfoSeq(String sPath, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFileInfoSeq(sPath, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getFileInfoSeq(String sPath, Callback_MQInterface_getFileInfoSeq __cb)
    {
        return begin_getFileInfoSeq(sPath, null, false, __cb);
    }

    public Ice.AsyncResult begin_getFileInfoSeq(String sPath, java.util.Map<String, String> __ctx, Callback_MQInterface_getFileInfoSeq __cb)
    {
        return begin_getFileInfoSeq(sPath, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getFileInfoSeq(String sPath, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFileInfoSeq_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getFileInfoSeq_name, __cb);
        try
        {
            __result.__prepare(__getFileInfoSeq_name, Ice.OperationMode.Nonmutating, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(sPath);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getFileInfoSeq(Ice.StringHolder sHelpInfo, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getFileInfoSeq_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            sHelpInfo.value = __is.readString();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean getFileInfoSeq_async(AMI_MQInterface_getFileInfoSeq __cb, String sPath)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFileInfoSeq_name);
            __r = begin_getFileInfoSeq(sPath, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFileInfoSeq_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean getFileInfoSeq_async(AMI_MQInterface_getFileInfoSeq __cb, String sPath, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__getFileInfoSeq_name);
            __r = begin_getFileInfoSeq(sPath, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __getFileInfoSeq_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __getRespone_name = "getRespone";

    public boolean getRespone(String sID, Ice.StringHolder outinfo, Ice.StringHolder error)
    {
        return getRespone(sID, outinfo, error, null, false);
    }

    public boolean getRespone(String sID, Ice.StringHolder outinfo, Ice.StringHolder error, java.util.Map<String, String> __ctx)
    {
        return getRespone(sID, outinfo, error, __ctx, true);
    }

    private boolean getRespone(String sID, Ice.StringHolder outinfo, Ice.StringHolder error, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getRespone", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getRespone");
                    __delBase = __getDelegate(false);
                    _MQInterfaceDel __del = (_MQInterfaceDel)__delBase;
                    return __del.getRespone(sID, outinfo, error, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getRespone(String sID)
    {
        return begin_getRespone(sID, null, false, null);
    }

    public Ice.AsyncResult begin_getRespone(String sID, java.util.Map<String, String> __ctx)
    {
        return begin_getRespone(sID, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getRespone(String sID, Ice.Callback __cb)
    {
        return begin_getRespone(sID, null, false, __cb);
    }

    public Ice.AsyncResult begin_getRespone(String sID, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getRespone(sID, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getRespone(String sID, Callback_MQInterface_getRespone __cb)
    {
        return begin_getRespone(sID, null, false, __cb);
    }

    public Ice.AsyncResult begin_getRespone(String sID, java.util.Map<String, String> __ctx, Callback_MQInterface_getRespone __cb)
    {
        return begin_getRespone(sID, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getRespone(String sID, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getRespone_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getRespone_name, __cb);
        try
        {
            __result.__prepare(__getRespone_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(sID);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getRespone(Ice.StringHolder outinfo, Ice.StringHolder error, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getRespone_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            outinfo.value = __is.readString();
            error.value = __is.readString();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getTime_name = "getTime";

    public String getTime()
    {
        return getTime(null, false);
    }

    public String getTime(java.util.Map<String, String> __ctx)
    {
        return getTime(__ctx, true);
    }

    private String getTime(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getTime", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getTime");
                    __delBase = __getDelegate(false);
                    _MQInterfaceDel __del = (_MQInterfaceDel)__delBase;
                    return __del.getTime(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getTime()
    {
        return begin_getTime(null, false, null);
    }

    public Ice.AsyncResult begin_getTime(java.util.Map<String, String> __ctx)
    {
        return begin_getTime(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getTime(Ice.Callback __cb)
    {
        return begin_getTime(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTime(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTime(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTime(Callback_MQInterface_getTime __cb)
    {
        return begin_getTime(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTime(java.util.Map<String, String> __ctx, Callback_MQInterface_getTime __cb)
    {
        return begin_getTime(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTime(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTime_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTime_name, __cb);
        try
        {
            __result.__prepare(__getTime_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getTime(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getTime_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __plugin_name = "plugin";

    public int plugin(String pname, String func, String param, Ice.StringHolder outmsg)
    {
        return plugin(pname, func, param, outmsg, null, false);
    }

    public int plugin(String pname, String func, String param, Ice.StringHolder outmsg, java.util.Map<String, String> __ctx)
    {
        return plugin(pname, func, param, outmsg, __ctx, true);
    }

    private int plugin(String pname, String func, String param, Ice.StringHolder outmsg, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "plugin", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("plugin");
                    __delBase = __getDelegate(false);
                    _MQInterfaceDel __del = (_MQInterfaceDel)__delBase;
                    return __del.plugin(pname, func, param, outmsg, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_plugin(String pname, String func, String param)
    {
        return begin_plugin(pname, func, param, null, false, null);
    }

    public Ice.AsyncResult begin_plugin(String pname, String func, String param, java.util.Map<String, String> __ctx)
    {
        return begin_plugin(pname, func, param, __ctx, true, null);
    }

    public Ice.AsyncResult begin_plugin(String pname, String func, String param, Ice.Callback __cb)
    {
        return begin_plugin(pname, func, param, null, false, __cb);
    }

    public Ice.AsyncResult begin_plugin(String pname, String func, String param, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_plugin(pname, func, param, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_plugin(String pname, String func, String param, Callback_MQInterface_plugin __cb)
    {
        return begin_plugin(pname, func, param, null, false, __cb);
    }

    public Ice.AsyncResult begin_plugin(String pname, String func, String param, java.util.Map<String, String> __ctx, Callback_MQInterface_plugin __cb)
    {
        return begin_plugin(pname, func, param, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_plugin(String pname, String func, String param, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__plugin_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __plugin_name, __cb);
        try
        {
            __result.__prepare(__plugin_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(pname);
            __os.writeString(func);
            __os.writeString(param);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_plugin(Ice.StringHolder outmsg, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __plugin_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            outmsg.value = __is.readString();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __select_name = "select";

    public int select(String sql, String param, Ice.StringHolder set, Ice.StringHolder error)
    {
        return select(sql, param, set, error, null, false);
    }

    public int select(String sql, String param, Ice.StringHolder set, Ice.StringHolder error, java.util.Map<String, String> __ctx)
    {
        return select(sql, param, set, error, __ctx, true);
    }

    private int select(String sql, String param, Ice.StringHolder set, Ice.StringHolder error, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "select", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("select");
                    __delBase = __getDelegate(false);
                    _MQInterfaceDel __del = (_MQInterfaceDel)__delBase;
                    return __del.select(sql, param, set, error, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_select(String sql, String param)
    {
        return begin_select(sql, param, null, false, null);
    }

    public Ice.AsyncResult begin_select(String sql, String param, java.util.Map<String, String> __ctx)
    {
        return begin_select(sql, param, __ctx, true, null);
    }

    public Ice.AsyncResult begin_select(String sql, String param, Ice.Callback __cb)
    {
        return begin_select(sql, param, null, false, __cb);
    }

    public Ice.AsyncResult begin_select(String sql, String param, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_select(sql, param, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_select(String sql, String param, Callback_MQInterface_select __cb)
    {
        return begin_select(sql, param, null, false, __cb);
    }

    public Ice.AsyncResult begin_select(String sql, String param, java.util.Map<String, String> __ctx, Callback_MQInterface_select __cb)
    {
        return begin_select(sql, param, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_select(String sql, String param, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__select_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __select_name, __cb);
        try
        {
            __result.__prepare(__select_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(sql);
            __os.writeString(param);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_select(Ice.StringHolder set, Ice.StringHolder error, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __select_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            set.value = __is.readString();
            error.value = __is.readString();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean select_async(AMI_MQInterface_select __cb, String sql, String param)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__select_name);
            __r = begin_select(sql, param, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __select_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean select_async(AMI_MQInterface_select __cb, String sql, String param, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__select_name);
            __r = begin_select(sql, param, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __select_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __selectCmd_name = "selectCmd";

    public int selectCmd(String cmd, String sqlcode, String param, Ice.StringHolder set, Ice.StringHolder error)
    {
        return selectCmd(cmd, sqlcode, param, set, error, null, false);
    }

    public int selectCmd(String cmd, String sqlcode, String param, Ice.StringHolder set, Ice.StringHolder error, java.util.Map<String, String> __ctx)
    {
        return selectCmd(cmd, sqlcode, param, set, error, __ctx, true);
    }

    private int selectCmd(String cmd, String sqlcode, String param, Ice.StringHolder set, Ice.StringHolder error, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "selectCmd", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("selectCmd");
                    __delBase = __getDelegate(false);
                    _MQInterfaceDel __del = (_MQInterfaceDel)__delBase;
                    return __del.selectCmd(cmd, sqlcode, param, set, error, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_selectCmd(String cmd, String sqlcode, String param)
    {
        return begin_selectCmd(cmd, sqlcode, param, null, false, null);
    }

    public Ice.AsyncResult begin_selectCmd(String cmd, String sqlcode, String param, java.util.Map<String, String> __ctx)
    {
        return begin_selectCmd(cmd, sqlcode, param, __ctx, true, null);
    }

    public Ice.AsyncResult begin_selectCmd(String cmd, String sqlcode, String param, Ice.Callback __cb)
    {
        return begin_selectCmd(cmd, sqlcode, param, null, false, __cb);
    }

    public Ice.AsyncResult begin_selectCmd(String cmd, String sqlcode, String param, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_selectCmd(cmd, sqlcode, param, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_selectCmd(String cmd, String sqlcode, String param, Callback_MQInterface_selectCmd __cb)
    {
        return begin_selectCmd(cmd, sqlcode, param, null, false, __cb);
    }

    public Ice.AsyncResult begin_selectCmd(String cmd, String sqlcode, String param, java.util.Map<String, String> __ctx, Callback_MQInterface_selectCmd __cb)
    {
        return begin_selectCmd(cmd, sqlcode, param, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_selectCmd(String cmd, String sqlcode, String param, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__selectCmd_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __selectCmd_name, __cb);
        try
        {
            __result.__prepare(__selectCmd_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(cmd);
            __os.writeString(sqlcode);
            __os.writeString(param);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_selectCmd(Ice.StringHolder set, Ice.StringHolder error, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __selectCmd_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            set.value = __is.readString();
            error.value = __is.readString();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean selectCmd_async(AMI_MQInterface_selectCmd __cb, String cmd, String sqlcode, String param)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selectCmd_name);
            __r = begin_selectCmd(cmd, sqlcode, param, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selectCmd_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean selectCmd_async(AMI_MQInterface_selectCmd __cb, String cmd, String sqlcode, String param, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selectCmd_name);
            __r = begin_selectCmd(cmd, sqlcode, param, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selectCmd_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __selectCompress_name = "selectCompress";

    public int selectCompress(String sql, String param, Ice.StringHolder set, Ice.StringHolder error)
    {
        return selectCompress(sql, param, set, error, null, false);
    }

    public int selectCompress(String sql, String param, Ice.StringHolder set, Ice.StringHolder error, java.util.Map<String, String> __ctx)
    {
        return selectCompress(sql, param, set, error, __ctx, true);
    }

    private int selectCompress(String sql, String param, Ice.StringHolder set, Ice.StringHolder error, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "selectCompress", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("selectCompress");
                    __delBase = __getDelegate(false);
                    _MQInterfaceDel __del = (_MQInterfaceDel)__delBase;
                    return __del.selectCompress(sql, param, set, error, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_selectCompress(String sql, String param)
    {
        return begin_selectCompress(sql, param, null, false, null);
    }

    public Ice.AsyncResult begin_selectCompress(String sql, String param, java.util.Map<String, String> __ctx)
    {
        return begin_selectCompress(sql, param, __ctx, true, null);
    }

    public Ice.AsyncResult begin_selectCompress(String sql, String param, Ice.Callback __cb)
    {
        return begin_selectCompress(sql, param, null, false, __cb);
    }

    public Ice.AsyncResult begin_selectCompress(String sql, String param, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_selectCompress(sql, param, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_selectCompress(String sql, String param, Callback_MQInterface_selectCompress __cb)
    {
        return begin_selectCompress(sql, param, null, false, __cb);
    }

    public Ice.AsyncResult begin_selectCompress(String sql, String param, java.util.Map<String, String> __ctx, Callback_MQInterface_selectCompress __cb)
    {
        return begin_selectCompress(sql, param, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_selectCompress(String sql, String param, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__selectCompress_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __selectCompress_name, __cb);
        try
        {
            __result.__prepare(__selectCompress_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(sql);
            __os.writeString(param);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_selectCompress(Ice.StringHolder set, Ice.StringHolder error, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __selectCompress_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            set.value = __is.readString();
            error.value = __is.readString();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean selectCompress_async(AMI_MQInterface_selectCompress __cb, String sql, String param)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selectCompress_name);
            __r = begin_selectCompress(sql, param, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selectCompress_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean selectCompress_async(AMI_MQInterface_selectCompress __cb, String sql, String param, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selectCompress_name);
            __r = begin_selectCompress(sql, param, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selectCompress_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __selectFinish_name = "selectFinish";

    public boolean selectFinish(String sID)
    {
        return selectFinish(sID, null, false);
    }

    public boolean selectFinish(String sID, java.util.Map<String, String> __ctx)
    {
        return selectFinish(sID, __ctx, true);
    }

    private boolean selectFinish(String sID, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "selectFinish", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("selectFinish");
                    __delBase = __getDelegate(false);
                    _MQInterfaceDel __del = (_MQInterfaceDel)__delBase;
                    return __del.selectFinish(sID, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_selectFinish(String sID)
    {
        return begin_selectFinish(sID, null, false, null);
    }

    public Ice.AsyncResult begin_selectFinish(String sID, java.util.Map<String, String> __ctx)
    {
        return begin_selectFinish(sID, __ctx, true, null);
    }

    public Ice.AsyncResult begin_selectFinish(String sID, Ice.Callback __cb)
    {
        return begin_selectFinish(sID, null, false, __cb);
    }

    public Ice.AsyncResult begin_selectFinish(String sID, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_selectFinish(sID, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_selectFinish(String sID, Callback_MQInterface_selectFinish __cb)
    {
        return begin_selectFinish(sID, null, false, __cb);
    }

    public Ice.AsyncResult begin_selectFinish(String sID, java.util.Map<String, String> __ctx, Callback_MQInterface_selectFinish __cb)
    {
        return begin_selectFinish(sID, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_selectFinish(String sID, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__selectFinish_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __selectFinish_name, __cb);
        try
        {
            __result.__prepare(__selectFinish_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(sID);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_selectFinish(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __selectFinish_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __selectNext_name = "selectNext";

    public int selectNext(String sID, Ice.StringHolder set)
    {
        return selectNext(sID, set, null, false);
    }

    public int selectNext(String sID, Ice.StringHolder set, java.util.Map<String, String> __ctx)
    {
        return selectNext(sID, set, __ctx, true);
    }

    private int selectNext(String sID, Ice.StringHolder set, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "selectNext", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("selectNext");
                    __delBase = __getDelegate(false);
                    _MQInterfaceDel __del = (_MQInterfaceDel)__delBase;
                    return __del.selectNext(sID, set, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_selectNext(String sID)
    {
        return begin_selectNext(sID, null, false, null);
    }

    public Ice.AsyncResult begin_selectNext(String sID, java.util.Map<String, String> __ctx)
    {
        return begin_selectNext(sID, __ctx, true, null);
    }

    public Ice.AsyncResult begin_selectNext(String sID, Ice.Callback __cb)
    {
        return begin_selectNext(sID, null, false, __cb);
    }

    public Ice.AsyncResult begin_selectNext(String sID, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_selectNext(sID, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_selectNext(String sID, Callback_MQInterface_selectNext __cb)
    {
        return begin_selectNext(sID, null, false, __cb);
    }

    public Ice.AsyncResult begin_selectNext(String sID, java.util.Map<String, String> __ctx, Callback_MQInterface_selectNext __cb)
    {
        return begin_selectNext(sID, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_selectNext(String sID, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__selectNext_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __selectNext_name, __cb);
        try
        {
            __result.__prepare(__selectNext_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(sID);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_selectNext(Ice.StringHolder set, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __selectNext_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            set.value = __is.readString();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean selectNext_async(AMI_MQInterface_selectNext __cb, String sID)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selectNext_name);
            __r = begin_selectNext(sID, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selectNext_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean selectNext_async(AMI_MQInterface_selectNext __cb, String sID, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selectNext_name);
            __r = begin_selectNext(sID, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selectNext_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __selectPage_name = "selectPage";

    public int selectPage(String sql, String param, int iStart, int iCount, Ice.StringHolder set, Ice.StringHolder error)
    {
        return selectPage(sql, param, iStart, iCount, set, error, null, false);
    }

    public int selectPage(String sql, String param, int iStart, int iCount, Ice.StringHolder set, Ice.StringHolder error, java.util.Map<String, String> __ctx)
    {
        return selectPage(sql, param, iStart, iCount, set, error, __ctx, true);
    }

    private int selectPage(String sql, String param, int iStart, int iCount, Ice.StringHolder set, Ice.StringHolder error, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "selectPage", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("selectPage");
                    __delBase = __getDelegate(false);
                    _MQInterfaceDel __del = (_MQInterfaceDel)__delBase;
                    return __del.selectPage(sql, param, iStart, iCount, set, error, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_selectPage(String sql, String param, int iStart, int iCount)
    {
        return begin_selectPage(sql, param, iStart, iCount, null, false, null);
    }

    public Ice.AsyncResult begin_selectPage(String sql, String param, int iStart, int iCount, java.util.Map<String, String> __ctx)
    {
        return begin_selectPage(sql, param, iStart, iCount, __ctx, true, null);
    }

    public Ice.AsyncResult begin_selectPage(String sql, String param, int iStart, int iCount, Ice.Callback __cb)
    {
        return begin_selectPage(sql, param, iStart, iCount, null, false, __cb);
    }

    public Ice.AsyncResult begin_selectPage(String sql, String param, int iStart, int iCount, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_selectPage(sql, param, iStart, iCount, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_selectPage(String sql, String param, int iStart, int iCount, Callback_MQInterface_selectPage __cb)
    {
        return begin_selectPage(sql, param, iStart, iCount, null, false, __cb);
    }

    public Ice.AsyncResult begin_selectPage(String sql, String param, int iStart, int iCount, java.util.Map<String, String> __ctx, Callback_MQInterface_selectPage __cb)
    {
        return begin_selectPage(sql, param, iStart, iCount, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_selectPage(String sql, String param, int iStart, int iCount, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__selectPage_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __selectPage_name, __cb);
        try
        {
            __result.__prepare(__selectPage_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(sql);
            __os.writeString(param);
            __os.writeInt(iStart);
            __os.writeInt(iCount);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_selectPage(Ice.StringHolder set, Ice.StringHolder error, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __selectPage_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            set.value = __is.readString();
            error.value = __is.readString();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean selectPage_async(AMI_MQInterface_selectPage __cb, String sql, String param, int iStart, int iCount)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selectPage_name);
            __r = begin_selectPage(sql, param, iStart, iCount, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selectPage_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean selectPage_async(AMI_MQInterface_selectPage __cb, String sql, String param, int iStart, int iCount, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selectPage_name);
            __r = begin_selectPage(sql, param, iStart, iCount, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selectPage_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __selectPrepare_name = "selectPrepare";

    public boolean selectPrepare(String sql, Ice.StringHolder sID, Ice.StringHolder error)
    {
        return selectPrepare(sql, sID, error, null, false);
    }

    public boolean selectPrepare(String sql, Ice.StringHolder sID, Ice.StringHolder error, java.util.Map<String, String> __ctx)
    {
        return selectPrepare(sql, sID, error, __ctx, true);
    }

    private boolean selectPrepare(String sql, Ice.StringHolder sID, Ice.StringHolder error, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "selectPrepare", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("selectPrepare");
                    __delBase = __getDelegate(false);
                    _MQInterfaceDel __del = (_MQInterfaceDel)__delBase;
                    return __del.selectPrepare(sql, sID, error, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_selectPrepare(String sql)
    {
        return begin_selectPrepare(sql, null, false, null);
    }

    public Ice.AsyncResult begin_selectPrepare(String sql, java.util.Map<String, String> __ctx)
    {
        return begin_selectPrepare(sql, __ctx, true, null);
    }

    public Ice.AsyncResult begin_selectPrepare(String sql, Ice.Callback __cb)
    {
        return begin_selectPrepare(sql, null, false, __cb);
    }

    public Ice.AsyncResult begin_selectPrepare(String sql, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_selectPrepare(sql, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_selectPrepare(String sql, Callback_MQInterface_selectPrepare __cb)
    {
        return begin_selectPrepare(sql, null, false, __cb);
    }

    public Ice.AsyncResult begin_selectPrepare(String sql, java.util.Map<String, String> __ctx, Callback_MQInterface_selectPrepare __cb)
    {
        return begin_selectPrepare(sql, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_selectPrepare(String sql, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__selectPrepare_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __selectPrepare_name, __cb);
        try
        {
            __result.__prepare(__selectPrepare_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(sql);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_selectPrepare(Ice.StringHolder sID, Ice.StringHolder error, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __selectPrepare_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            sID.value = __is.readString();
            error.value = __is.readString();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean selectPrepare_async(AMI_MQInterface_selectPrepare __cb, String sql)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selectPrepare_name);
            __r = begin_selectPrepare(sql, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selectPrepare_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean selectPrepare_async(AMI_MQInterface_selectPrepare __cb, String sql, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selectPrepare_name);
            __r = begin_selectPrepare(sql, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selectPrepare_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __selectPrepareByParam_name = "selectPrepareByParam";

    public boolean selectPrepareByParam(String sql, String param, Ice.StringHolder sID, Ice.StringHolder error)
    {
        return selectPrepareByParam(sql, param, sID, error, null, false);
    }

    public boolean selectPrepareByParam(String sql, String param, Ice.StringHolder sID, Ice.StringHolder error, java.util.Map<String, String> __ctx)
    {
        return selectPrepareByParam(sql, param, sID, error, __ctx, true);
    }

    private boolean selectPrepareByParam(String sql, String param, Ice.StringHolder sID, Ice.StringHolder error, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "selectPrepareByParam", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("selectPrepareByParam");
                    __delBase = __getDelegate(false);
                    _MQInterfaceDel __del = (_MQInterfaceDel)__delBase;
                    return __del.selectPrepareByParam(sql, param, sID, error, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_selectPrepareByParam(String sql, String param)
    {
        return begin_selectPrepareByParam(sql, param, null, false, null);
    }

    public Ice.AsyncResult begin_selectPrepareByParam(String sql, String param, java.util.Map<String, String> __ctx)
    {
        return begin_selectPrepareByParam(sql, param, __ctx, true, null);
    }

    public Ice.AsyncResult begin_selectPrepareByParam(String sql, String param, Ice.Callback __cb)
    {
        return begin_selectPrepareByParam(sql, param, null, false, __cb);
    }

    public Ice.AsyncResult begin_selectPrepareByParam(String sql, String param, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_selectPrepareByParam(sql, param, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_selectPrepareByParam(String sql, String param, Callback_MQInterface_selectPrepareByParam __cb)
    {
        return begin_selectPrepareByParam(sql, param, null, false, __cb);
    }

    public Ice.AsyncResult begin_selectPrepareByParam(String sql, String param, java.util.Map<String, String> __ctx, Callback_MQInterface_selectPrepareByParam __cb)
    {
        return begin_selectPrepareByParam(sql, param, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_selectPrepareByParam(String sql, String param, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__selectPrepareByParam_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __selectPrepareByParam_name, __cb);
        try
        {
            __result.__prepare(__selectPrepareByParam_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(sql);
            __os.writeString(param);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_selectPrepareByParam(Ice.StringHolder sID, Ice.StringHolder error, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __selectPrepareByParam_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            sID.value = __is.readString();
            error.value = __is.readString();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public boolean selectPrepareByParam_async(AMI_MQInterface_selectPrepareByParam __cb, String sql, String param)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selectPrepareByParam_name);
            __r = begin_selectPrepareByParam(sql, param, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selectPrepareByParam_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean selectPrepareByParam_async(AMI_MQInterface_selectPrepareByParam __cb, String sql, String param, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__selectPrepareByParam_name);
            __r = begin_selectPrepareByParam(sql, param, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __selectPrepareByParam_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    private static final String __send_name = "send";

    public boolean send(String msg)
    {
        return send(msg, null, false);
    }

    public boolean send(String msg, java.util.Map<String, String> __ctx)
    {
        return send(msg, __ctx, true);
    }

    private boolean send(String msg, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "send", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("send");
                    __delBase = __getDelegate(false);
                    _MQInterfaceDel __del = (_MQInterfaceDel)__delBase;
                    return __del.send(msg, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_send(String msg)
    {
        return begin_send(msg, null, false, null);
    }

    public Ice.AsyncResult begin_send(String msg, java.util.Map<String, String> __ctx)
    {
        return begin_send(msg, __ctx, true, null);
    }

    public Ice.AsyncResult begin_send(String msg, Ice.Callback __cb)
    {
        return begin_send(msg, null, false, __cb);
    }

    public Ice.AsyncResult begin_send(String msg, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_send(msg, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_send(String msg, Callback_MQInterface_send __cb)
    {
        return begin_send(msg, null, false, __cb);
    }

    public Ice.AsyncResult begin_send(String msg, java.util.Map<String, String> __ctx, Callback_MQInterface_send __cb)
    {
        return begin_send(msg, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_send(String msg, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__send_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __send_name, __cb);
        try
        {
            __result.__prepare(__send_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(msg);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_send(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __send_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __sendOneway_name = "sendOneway";

    public void sendOneway(String msg)
    {
        sendOneway(msg, null, false);
    }

    public void sendOneway(String msg, java.util.Map<String, String> __ctx)
    {
        sendOneway(msg, __ctx, true);
    }

    private void sendOneway(String msg, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "sendOneway", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _MQInterfaceDel __del = (_MQInterfaceDel)__delBase;
                    __del.sendOneway(msg, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_sendOneway(String msg)
    {
        return begin_sendOneway(msg, null, false, null);
    }

    public Ice.AsyncResult begin_sendOneway(String msg, java.util.Map<String, String> __ctx)
    {
        return begin_sendOneway(msg, __ctx, true, null);
    }

    public Ice.AsyncResult begin_sendOneway(String msg, Ice.Callback __cb)
    {
        return begin_sendOneway(msg, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendOneway(String msg, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendOneway(msg, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_sendOneway(String msg, Callback_MQInterface_sendOneway __cb)
    {
        return begin_sendOneway(msg, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendOneway(String msg, java.util.Map<String, String> __ctx, Callback_MQInterface_sendOneway __cb)
    {
        return begin_sendOneway(msg, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_sendOneway(String msg, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __sendOneway_name, __cb);
        try
        {
            __result.__prepare(__sendOneway_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(msg);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_sendOneway(Ice.AsyncResult __result)
    {
        __end(__result, __sendOneway_name);
    }

    private static final String __version_name = "version";

    public String version()
    {
        return version(null, false);
    }

    public String version(java.util.Map<String, String> __ctx)
    {
        return version(__ctx, true);
    }

    private String version(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "version", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("version");
                    __delBase = __getDelegate(false);
                    _MQInterfaceDel __del = (_MQInterfaceDel)__delBase;
                    return __del.version(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_version()
    {
        return begin_version(null, false, null);
    }

    public Ice.AsyncResult begin_version(java.util.Map<String, String> __ctx)
    {
        return begin_version(__ctx, true, null);
    }

    public Ice.AsyncResult begin_version(Ice.Callback __cb)
    {
        return begin_version(null, false, __cb);
    }

    public Ice.AsyncResult begin_version(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_version(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_version(Callback_MQInterface_version __cb)
    {
        return begin_version(null, false, __cb);
    }

    public Ice.AsyncResult begin_version(java.util.Map<String, String> __ctx, Callback_MQInterface_version __cb)
    {
        return begin_version(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_version(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__version_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __version_name, __cb);
        try
        {
            __result.__prepare(__version_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_version(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __version_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __writeBusiLog_name = "writeBusiLog";

    public boolean writeBusiLog(String personid, String ip, String busiType, String comment)
    {
        return writeBusiLog(personid, ip, busiType, comment, null, false);
    }

    public boolean writeBusiLog(String personid, String ip, String busiType, String comment, java.util.Map<String, String> __ctx)
    {
        return writeBusiLog(personid, ip, busiType, comment, __ctx, true);
    }

    private boolean writeBusiLog(String personid, String ip, String busiType, String comment, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "writeBusiLog", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("writeBusiLog");
                    __delBase = __getDelegate(false);
                    _MQInterfaceDel __del = (_MQInterfaceDel)__delBase;
                    return __del.writeBusiLog(personid, ip, busiType, comment, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_writeBusiLog(String personid, String ip, String busiType, String comment)
    {
        return begin_writeBusiLog(personid, ip, busiType, comment, null, false, null);
    }

    public Ice.AsyncResult begin_writeBusiLog(String personid, String ip, String busiType, String comment, java.util.Map<String, String> __ctx)
    {
        return begin_writeBusiLog(personid, ip, busiType, comment, __ctx, true, null);
    }

    public Ice.AsyncResult begin_writeBusiLog(String personid, String ip, String busiType, String comment, Ice.Callback __cb)
    {
        return begin_writeBusiLog(personid, ip, busiType, comment, null, false, __cb);
    }

    public Ice.AsyncResult begin_writeBusiLog(String personid, String ip, String busiType, String comment, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_writeBusiLog(personid, ip, busiType, comment, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_writeBusiLog(String personid, String ip, String busiType, String comment, Callback_MQInterface_writeBusiLog __cb)
    {
        return begin_writeBusiLog(personid, ip, busiType, comment, null, false, __cb);
    }

    public Ice.AsyncResult begin_writeBusiLog(String personid, String ip, String busiType, String comment, java.util.Map<String, String> __ctx, Callback_MQInterface_writeBusiLog __cb)
    {
        return begin_writeBusiLog(personid, ip, busiType, comment, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_writeBusiLog(String personid, String ip, String busiType, String comment, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__writeBusiLog_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __writeBusiLog_name, __cb);
        try
        {
            __result.__prepare(__writeBusiLog_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(personid);
            __os.writeString(ip);
            __os.writeString(busiType);
            __os.writeString(comment);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_writeBusiLog(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __writeBusiLog_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public static MQInterfacePrx checkedCast(Ice.ObjectPrx __obj)
    {
        MQInterfacePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof MQInterfacePrx)
            {
                __d = (MQInterfacePrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    MQInterfacePrxHelper __h = new MQInterfacePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static MQInterfacePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        MQInterfacePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof MQInterfacePrx)
            {
                __d = (MQInterfacePrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    MQInterfacePrxHelper __h = new MQInterfacePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static MQInterfacePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        MQInterfacePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    MQInterfacePrxHelper __h = new MQInterfacePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static MQInterfacePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        MQInterfacePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    MQInterfacePrxHelper __h = new MQInterfacePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static MQInterfacePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        MQInterfacePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof MQInterfacePrx)
            {
                __d = (MQInterfacePrx)__obj;
            }
            else
            {
                MQInterfacePrxHelper __h = new MQInterfacePrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static MQInterfacePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        MQInterfacePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            MQInterfacePrxHelper __h = new MQInterfacePrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::MQServerModule::MQInterface"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _MQInterfaceDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _MQInterfaceDelD();
    }

    public static void __write(IceInternal.BasicStream __os, MQInterfacePrx v)
    {
        __os.writeProxy(v);
    }

    public static MQInterfacePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            MQInterfacePrxHelper result = new MQInterfacePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
