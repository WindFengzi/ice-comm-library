// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `mq_interface.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package MQServerModule;

public interface MQInterfacePrx extends Ice.ObjectPrx
{
    public String version();

    public String version(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_version();

    public Ice.AsyncResult begin_version(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_version(Ice.Callback __cb);

    public Ice.AsyncResult begin_version(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_version(Callback_MQInterface_version __cb);

    public Ice.AsyncResult begin_version(java.util.Map<String, String> __ctx, Callback_MQInterface_version __cb);

    public String end_version(Ice.AsyncResult __result);

    public String getTime();

    public String getTime(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getTime();

    public Ice.AsyncResult begin_getTime(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getTime(Ice.Callback __cb);

    public Ice.AsyncResult begin_getTime(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getTime(Callback_MQInterface_getTime __cb);

    public Ice.AsyncResult begin_getTime(java.util.Map<String, String> __ctx, Callback_MQInterface_getTime __cb);

    public String end_getTime(Ice.AsyncResult __result);

    public String getConfigure(String segment, String key);

    public String getConfigure(String segment, String key, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getConfigure(String segment, String key);

    public Ice.AsyncResult begin_getConfigure(String segment, String key, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getConfigure(String segment, String key, Ice.Callback __cb);

    public Ice.AsyncResult begin_getConfigure(String segment, String key, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getConfigure(String segment, String key, Callback_MQInterface_getConfigure __cb);

    public Ice.AsyncResult begin_getConfigure(String segment, String key, java.util.Map<String, String> __ctx, Callback_MQInterface_getConfigure __cb);

    public String end_getConfigure(Ice.AsyncResult __result);

    public void sendOneway(String msg);

    public void sendOneway(String msg, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_sendOneway(String msg);

    public Ice.AsyncResult begin_sendOneway(String msg, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_sendOneway(String msg, Ice.Callback __cb);

    public Ice.AsyncResult begin_sendOneway(String msg, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_sendOneway(String msg, Callback_MQInterface_sendOneway __cb);

    public Ice.AsyncResult begin_sendOneway(String msg, java.util.Map<String, String> __ctx, Callback_MQInterface_sendOneway __cb);

    public void end_sendOneway(Ice.AsyncResult __result);

    public boolean send(String msg);

    public boolean send(String msg, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_send(String msg);

    public Ice.AsyncResult begin_send(String msg, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_send(String msg, Ice.Callback __cb);

    public Ice.AsyncResult begin_send(String msg, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_send(String msg, Callback_MQInterface_send __cb);

    public Ice.AsyncResult begin_send(String msg, java.util.Map<String, String> __ctx, Callback_MQInterface_send __cb);

    public boolean end_send(Ice.AsyncResult __result);

    public int command(String cmd, String param, Ice.StringHolder outmsg);

    public int command(String cmd, String param, Ice.StringHolder outmsg, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_command(String cmd, String param);

    public Ice.AsyncResult begin_command(String cmd, String param, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_command(String cmd, String param, Ice.Callback __cb);

    public Ice.AsyncResult begin_command(String cmd, String param, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_command(String cmd, String param, Callback_MQInterface_command __cb);

    public Ice.AsyncResult begin_command(String cmd, String param, java.util.Map<String, String> __ctx, Callback_MQInterface_command __cb);

    public int end_command(Ice.StringHolder outmsg, Ice.AsyncResult __result);

    public int plugin(String pname, String func, String param, Ice.StringHolder outmsg);

    public int plugin(String pname, String func, String param, Ice.StringHolder outmsg, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_plugin(String pname, String func, String param);

    public Ice.AsyncResult begin_plugin(String pname, String func, String param, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_plugin(String pname, String func, String param, Ice.Callback __cb);

    public Ice.AsyncResult begin_plugin(String pname, String func, String param, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_plugin(String pname, String func, String param, Callback_MQInterface_plugin __cb);

    public Ice.AsyncResult begin_plugin(String pname, String func, String param, java.util.Map<String, String> __ctx, Callback_MQInterface_plugin __cb);

    public int end_plugin(Ice.StringHolder outmsg, Ice.AsyncResult __result);

    public int selectCmd(String cmd, String sqlcode, String param, Ice.StringHolder set, Ice.StringHolder error);

    public int selectCmd(String cmd, String sqlcode, String param, Ice.StringHolder set, Ice.StringHolder error, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_selectCmd(String cmd, String sqlcode, String param);

    public Ice.AsyncResult begin_selectCmd(String cmd, String sqlcode, String param, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_selectCmd(String cmd, String sqlcode, String param, Ice.Callback __cb);

    public Ice.AsyncResult begin_selectCmd(String cmd, String sqlcode, String param, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_selectCmd(String cmd, String sqlcode, String param, Callback_MQInterface_selectCmd __cb);

    public Ice.AsyncResult begin_selectCmd(String cmd, String sqlcode, String param, java.util.Map<String, String> __ctx, Callback_MQInterface_selectCmd __cb);

    public int end_selectCmd(Ice.StringHolder set, Ice.StringHolder error, Ice.AsyncResult __result);

    public boolean selectCmd_async(AMI_MQInterface_selectCmd __cb, String cmd, String sqlcode, String param);

    public boolean selectCmd_async(AMI_MQInterface_selectCmd __cb, String cmd, String sqlcode, String param, java.util.Map<String, String> __ctx);

    public int execCmd(String cmd, String sqlcode, String param, Ice.StringHolder set, Ice.StringHolder error);

    public int execCmd(String cmd, String sqlcode, String param, Ice.StringHolder set, Ice.StringHolder error, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_execCmd(String cmd, String sqlcode, String param);

    public Ice.AsyncResult begin_execCmd(String cmd, String sqlcode, String param, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_execCmd(String cmd, String sqlcode, String param, Ice.Callback __cb);

    public Ice.AsyncResult begin_execCmd(String cmd, String sqlcode, String param, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_execCmd(String cmd, String sqlcode, String param, Callback_MQInterface_execCmd __cb);

    public Ice.AsyncResult begin_execCmd(String cmd, String sqlcode, String param, java.util.Map<String, String> __ctx, Callback_MQInterface_execCmd __cb);

    public int end_execCmd(Ice.StringHolder set, Ice.StringHolder error, Ice.AsyncResult __result);

    public boolean execCmd_async(AMI_MQInterface_execCmd __cb, String cmd, String sqlcode, String param);

    public boolean execCmd_async(AMI_MQInterface_execCmd __cb, String cmd, String sqlcode, String param, java.util.Map<String, String> __ctx);

    public int select(String sql, String param, Ice.StringHolder set, Ice.StringHolder error);

    public int select(String sql, String param, Ice.StringHolder set, Ice.StringHolder error, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_select(String sql, String param);

    public Ice.AsyncResult begin_select(String sql, String param, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_select(String sql, String param, Ice.Callback __cb);

    public Ice.AsyncResult begin_select(String sql, String param, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_select(String sql, String param, Callback_MQInterface_select __cb);

    public Ice.AsyncResult begin_select(String sql, String param, java.util.Map<String, String> __ctx, Callback_MQInterface_select __cb);

    public int end_select(Ice.StringHolder set, Ice.StringHolder error, Ice.AsyncResult __result);

    public boolean select_async(AMI_MQInterface_select __cb, String sql, String param);

    public boolean select_async(AMI_MQInterface_select __cb, String sql, String param, java.util.Map<String, String> __ctx);

    public int selectCompress(String sql, String param, Ice.StringHolder set, Ice.StringHolder error);

    public int selectCompress(String sql, String param, Ice.StringHolder set, Ice.StringHolder error, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_selectCompress(String sql, String param);

    public Ice.AsyncResult begin_selectCompress(String sql, String param, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_selectCompress(String sql, String param, Ice.Callback __cb);

    public Ice.AsyncResult begin_selectCompress(String sql, String param, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_selectCompress(String sql, String param, Callback_MQInterface_selectCompress __cb);

    public Ice.AsyncResult begin_selectCompress(String sql, String param, java.util.Map<String, String> __ctx, Callback_MQInterface_selectCompress __cb);

    public int end_selectCompress(Ice.StringHolder set, Ice.StringHolder error, Ice.AsyncResult __result);

    public boolean selectCompress_async(AMI_MQInterface_selectCompress __cb, String sql, String param);

    public boolean selectCompress_async(AMI_MQInterface_selectCompress __cb, String sql, String param, java.util.Map<String, String> __ctx);

    public int selectPage(String sql, String param, int iStart, int iCount, Ice.StringHolder set, Ice.StringHolder error);

    public int selectPage(String sql, String param, int iStart, int iCount, Ice.StringHolder set, Ice.StringHolder error, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_selectPage(String sql, String param, int iStart, int iCount);

    public Ice.AsyncResult begin_selectPage(String sql, String param, int iStart, int iCount, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_selectPage(String sql, String param, int iStart, int iCount, Ice.Callback __cb);

    public Ice.AsyncResult begin_selectPage(String sql, String param, int iStart, int iCount, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_selectPage(String sql, String param, int iStart, int iCount, Callback_MQInterface_selectPage __cb);

    public Ice.AsyncResult begin_selectPage(String sql, String param, int iStart, int iCount, java.util.Map<String, String> __ctx, Callback_MQInterface_selectPage __cb);

    public int end_selectPage(Ice.StringHolder set, Ice.StringHolder error, Ice.AsyncResult __result);

    public boolean selectPage_async(AMI_MQInterface_selectPage __cb, String sql, String param, int iStart, int iCount);

    public boolean selectPage_async(AMI_MQInterface_selectPage __cb, String sql, String param, int iStart, int iCount, java.util.Map<String, String> __ctx);

    public boolean execSQL(String sql, String param, Ice.StringHolder error);

    public boolean execSQL(String sql, String param, Ice.StringHolder error, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_execSQL(String sql, String param);

    public Ice.AsyncResult begin_execSQL(String sql, String param, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_execSQL(String sql, String param, Ice.Callback __cb);

    public Ice.AsyncResult begin_execSQL(String sql, String param, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_execSQL(String sql, String param, Callback_MQInterface_execSQL __cb);

    public Ice.AsyncResult begin_execSQL(String sql, String param, java.util.Map<String, String> __ctx, Callback_MQInterface_execSQL __cb);

    public boolean end_execSQL(Ice.StringHolder error, Ice.AsyncResult __result);

    public boolean execSQL_async(AMI_MQInterface_execSQL __cb, String sql, String param);

    public boolean execSQL_async(AMI_MQInterface_execSQL __cb, String sql, String param, java.util.Map<String, String> __ctx);

    public boolean execProc(String sql, String param, Ice.StringHolder set, Ice.StringHolder error);

    public boolean execProc(String sql, String param, Ice.StringHolder set, Ice.StringHolder error, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_execProc(String sql, String param);

    public Ice.AsyncResult begin_execProc(String sql, String param, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_execProc(String sql, String param, Ice.Callback __cb);

    public Ice.AsyncResult begin_execProc(String sql, String param, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_execProc(String sql, String param, Callback_MQInterface_execProc __cb);

    public Ice.AsyncResult begin_execProc(String sql, String param, java.util.Map<String, String> __ctx, Callback_MQInterface_execProc __cb);

    public boolean end_execProc(Ice.StringHolder set, Ice.StringHolder error, Ice.AsyncResult __result);

    public boolean execProc_async(AMI_MQInterface_execProc __cb, String sql, String param);

    public boolean execProc_async(AMI_MQInterface_execProc __cb, String sql, String param, java.util.Map<String, String> __ctx);

    public boolean execSQLBatch(String sqlblock, Ice.StringHolder error);

    public boolean execSQLBatch(String sqlblock, Ice.StringHolder error, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_execSQLBatch(String sqlblock);

    public Ice.AsyncResult begin_execSQLBatch(String sqlblock, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_execSQLBatch(String sqlblock, Ice.Callback __cb);

    public Ice.AsyncResult begin_execSQLBatch(String sqlblock, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_execSQLBatch(String sqlblock, Callback_MQInterface_execSQLBatch __cb);

    public Ice.AsyncResult begin_execSQLBatch(String sqlblock, java.util.Map<String, String> __ctx, Callback_MQInterface_execSQLBatch __cb);

    public boolean end_execSQLBatch(Ice.StringHolder error, Ice.AsyncResult __result);

    public boolean execSQLBatch_async(AMI_MQInterface_execSQLBatch __cb, String sqlblock);

    public boolean execSQLBatch_async(AMI_MQInterface_execSQLBatch __cb, String sqlblock, java.util.Map<String, String> __ctx);

    public boolean writeBusiLog(String personid, String ip, String busiType, String comment);

    public boolean writeBusiLog(String personid, String ip, String busiType, String comment, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_writeBusiLog(String personid, String ip, String busiType, String comment);

    public Ice.AsyncResult begin_writeBusiLog(String personid, String ip, String busiType, String comment, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_writeBusiLog(String personid, String ip, String busiType, String comment, Ice.Callback __cb);

    public Ice.AsyncResult begin_writeBusiLog(String personid, String ip, String busiType, String comment, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_writeBusiLog(String personid, String ip, String busiType, String comment, Callback_MQInterface_writeBusiLog __cb);

    public Ice.AsyncResult begin_writeBusiLog(String personid, String ip, String busiType, String comment, java.util.Map<String, String> __ctx, Callback_MQInterface_writeBusiLog __cb);

    public boolean end_writeBusiLog(Ice.AsyncResult __result);

    public boolean getRespone(String sID, Ice.StringHolder outinfo, Ice.StringHolder error);

    public boolean getRespone(String sID, Ice.StringHolder outinfo, Ice.StringHolder error, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getRespone(String sID);

    public Ice.AsyncResult begin_getRespone(String sID, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getRespone(String sID, Ice.Callback __cb);

    public Ice.AsyncResult begin_getRespone(String sID, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getRespone(String sID, Callback_MQInterface_getRespone __cb);

    public Ice.AsyncResult begin_getRespone(String sID, java.util.Map<String, String> __ctx, Callback_MQInterface_getRespone __cb);

    public boolean end_getRespone(Ice.StringHolder outinfo, Ice.StringHolder error, Ice.AsyncResult __result);

    public boolean desc(String sql, Ice.StringHolder set, Ice.StringHolder insertsql, Ice.StringHolder error);

    public boolean desc(String sql, Ice.StringHolder set, Ice.StringHolder insertsql, Ice.StringHolder error, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_desc(String sql);

    public Ice.AsyncResult begin_desc(String sql, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_desc(String sql, Ice.Callback __cb);

    public Ice.AsyncResult begin_desc(String sql, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_desc(String sql, Callback_MQInterface_desc __cb);

    public Ice.AsyncResult begin_desc(String sql, java.util.Map<String, String> __ctx, Callback_MQInterface_desc __cb);

    public boolean end_desc(Ice.StringHolder set, Ice.StringHolder insertsql, Ice.StringHolder error, Ice.AsyncResult __result);

    public boolean selectPrepareByParam(String sql, String param, Ice.StringHolder sID, Ice.StringHolder error);

    public boolean selectPrepareByParam(String sql, String param, Ice.StringHolder sID, Ice.StringHolder error, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_selectPrepareByParam(String sql, String param);

    public Ice.AsyncResult begin_selectPrepareByParam(String sql, String param, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_selectPrepareByParam(String sql, String param, Ice.Callback __cb);

    public Ice.AsyncResult begin_selectPrepareByParam(String sql, String param, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_selectPrepareByParam(String sql, String param, Callback_MQInterface_selectPrepareByParam __cb);

    public Ice.AsyncResult begin_selectPrepareByParam(String sql, String param, java.util.Map<String, String> __ctx, Callback_MQInterface_selectPrepareByParam __cb);

    public boolean end_selectPrepareByParam(Ice.StringHolder sID, Ice.StringHolder error, Ice.AsyncResult __result);

    public boolean selectPrepareByParam_async(AMI_MQInterface_selectPrepareByParam __cb, String sql, String param);

    public boolean selectPrepareByParam_async(AMI_MQInterface_selectPrepareByParam __cb, String sql, String param, java.util.Map<String, String> __ctx);

    public boolean selectPrepare(String sql, Ice.StringHolder sID, Ice.StringHolder error);

    public boolean selectPrepare(String sql, Ice.StringHolder sID, Ice.StringHolder error, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_selectPrepare(String sql);

    public Ice.AsyncResult begin_selectPrepare(String sql, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_selectPrepare(String sql, Ice.Callback __cb);

    public Ice.AsyncResult begin_selectPrepare(String sql, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_selectPrepare(String sql, Callback_MQInterface_selectPrepare __cb);

    public Ice.AsyncResult begin_selectPrepare(String sql, java.util.Map<String, String> __ctx, Callback_MQInterface_selectPrepare __cb);

    public boolean end_selectPrepare(Ice.StringHolder sID, Ice.StringHolder error, Ice.AsyncResult __result);

    public boolean selectPrepare_async(AMI_MQInterface_selectPrepare __cb, String sql);

    public boolean selectPrepare_async(AMI_MQInterface_selectPrepare __cb, String sql, java.util.Map<String, String> __ctx);

    public int selectNext(String sID, Ice.StringHolder set);

    public int selectNext(String sID, Ice.StringHolder set, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_selectNext(String sID);

    public Ice.AsyncResult begin_selectNext(String sID, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_selectNext(String sID, Ice.Callback __cb);

    public Ice.AsyncResult begin_selectNext(String sID, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_selectNext(String sID, Callback_MQInterface_selectNext __cb);

    public Ice.AsyncResult begin_selectNext(String sID, java.util.Map<String, String> __ctx, Callback_MQInterface_selectNext __cb);

    public int end_selectNext(Ice.StringHolder set, Ice.AsyncResult __result);

    public boolean selectNext_async(AMI_MQInterface_selectNext __cb, String sID);

    public boolean selectNext_async(AMI_MQInterface_selectNext __cb, String sID, java.util.Map<String, String> __ctx);

    public boolean selectFinish(String sID);

    public boolean selectFinish(String sID, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_selectFinish(String sID);

    public Ice.AsyncResult begin_selectFinish(String sID, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_selectFinish(String sID, Ice.Callback __cb);

    public Ice.AsyncResult begin_selectFinish(String sID, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_selectFinish(String sID, Callback_MQInterface_selectFinish __cb);

    public Ice.AsyncResult begin_selectFinish(String sID, java.util.Map<String, String> __ctx, Callback_MQInterface_selectFinish __cb);

    public boolean end_selectFinish(Ice.AsyncResult __result);

    public boolean getFileInfo(String sFilePath, Ice.StringHolder sHelpInfo);

    public boolean getFileInfo(String sFilePath, Ice.StringHolder sHelpInfo, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getFileInfo(String sFilePath);

    public Ice.AsyncResult begin_getFileInfo(String sFilePath, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getFileInfo(String sFilePath, Ice.Callback __cb);

    public Ice.AsyncResult begin_getFileInfo(String sFilePath, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getFileInfo(String sFilePath, Callback_MQInterface_getFileInfo __cb);

    public Ice.AsyncResult begin_getFileInfo(String sFilePath, java.util.Map<String, String> __ctx, Callback_MQInterface_getFileInfo __cb);

    public boolean end_getFileInfo(Ice.StringHolder sHelpInfo, Ice.AsyncResult __result);

    public boolean getFileInfo_async(AMI_MQInterface_getFileInfo __cb, String sFilePath);

    public boolean getFileInfo_async(AMI_MQInterface_getFileInfo __cb, String sFilePath, java.util.Map<String, String> __ctx);

    public boolean getFileInfoSeq(String sPath, Ice.StringHolder sHelpInfo);

    public boolean getFileInfoSeq(String sPath, Ice.StringHolder sHelpInfo, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getFileInfoSeq(String sPath);

    public Ice.AsyncResult begin_getFileInfoSeq(String sPath, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getFileInfoSeq(String sPath, Ice.Callback __cb);

    public Ice.AsyncResult begin_getFileInfoSeq(String sPath, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getFileInfoSeq(String sPath, Callback_MQInterface_getFileInfoSeq __cb);

    public Ice.AsyncResult begin_getFileInfoSeq(String sPath, java.util.Map<String, String> __ctx, Callback_MQInterface_getFileInfoSeq __cb);

    public boolean end_getFileInfoSeq(Ice.StringHolder sHelpInfo, Ice.AsyncResult __result);

    public boolean getFileInfoSeq_async(AMI_MQInterface_getFileInfoSeq __cb, String sPath);

    public boolean getFileInfoSeq_async(AMI_MQInterface_getFileInfoSeq __cb, String sPath, java.util.Map<String, String> __ctx);

    /**
     * Read the specified file. If the read operation fails, the
     * operation throws {@link FileAccessException}. This operation may only
     * return fewer bytes than requested in case there was an
     * end-of-file condition.
     * 
     * @param path The pathname (relative to the data directory) for
     * the file to be read.
     * 
     * @param pos The file offset at which to begin reading.
     * 
     * @param num The number of bytes to be read.
     * 
     * @return A sequence containing the compressed file contents.
     * 
     **/
    public byte[] getFileCompressed(String path, int pos, int num, Ice.IntHolder iResult);

    /**
     * Read the specified file. If the read operation fails, the
     * operation throws {@link FileAccessException}. This operation may only
     * return fewer bytes than requested in case there was an
     * end-of-file condition.
     * 
     * @param path The pathname (relative to the data directory) for
     * the file to be read.
     * 
     * @param pos The file offset at which to begin reading.
     * 
     * @param num The number of bytes to be read.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return A sequence containing the compressed file contents.
     * 
     **/
    public byte[] getFileCompressed(String path, int pos, int num, Ice.IntHolder iResult, java.util.Map<String, String> __ctx);

    /**
     * Read the specified file. If the read operation fails, the
     * operation throws {@link FileAccessException}. This operation may only
     * return fewer bytes than requested in case there was an
     * end-of-file condition.
     * 
     * @param path The pathname (relative to the data directory) for
     * the file to be read.
     * 
     * @param pos The file offset at which to begin reading.
     * 
     * @param num The number of bytes to be read.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getFileCompressed(String path, int pos, int num);

    /**
     * Read the specified file. If the read operation fails, the
     * operation throws {@link FileAccessException}. This operation may only
     * return fewer bytes than requested in case there was an
     * end-of-file condition.
     * 
     * @param path The pathname (relative to the data directory) for
     * the file to be read.
     * 
     * @param pos The file offset at which to begin reading.
     * 
     * @param num The number of bytes to be read.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getFileCompressed(String path, int pos, int num, java.util.Map<String, String> __ctx);

    /**
     * Read the specified file. If the read operation fails, the
     * operation throws {@link FileAccessException}. This operation may only
     * return fewer bytes than requested in case there was an
     * end-of-file condition.
     * 
     * @param path The pathname (relative to the data directory) for
     * the file to be read.
     * 
     * @param pos The file offset at which to begin reading.
     * 
     * @param num The number of bytes to be read.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getFileCompressed(String path, int pos, int num, Ice.Callback __cb);

    /**
     * Read the specified file. If the read operation fails, the
     * operation throws {@link FileAccessException}. This operation may only
     * return fewer bytes than requested in case there was an
     * end-of-file condition.
     * 
     * @param path The pathname (relative to the data directory) for
     * the file to be read.
     * 
     * @param pos The file offset at which to begin reading.
     * 
     * @param num The number of bytes to be read.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getFileCompressed(String path, int pos, int num, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Read the specified file. If the read operation fails, the
     * operation throws {@link FileAccessException}. This operation may only
     * return fewer bytes than requested in case there was an
     * end-of-file condition.
     * 
     * @param path The pathname (relative to the data directory) for
     * the file to be read.
     * 
     * @param pos The file offset at which to begin reading.
     * 
     * @param num The number of bytes to be read.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getFileCompressed(String path, int pos, int num, Callback_MQInterface_getFileCompressed __cb);

    /**
     * Read the specified file. If the read operation fails, the
     * operation throws {@link FileAccessException}. This operation may only
     * return fewer bytes than requested in case there was an
     * end-of-file condition.
     * 
     * @param path The pathname (relative to the data directory) for
     * the file to be read.
     * 
     * @param pos The file offset at which to begin reading.
     * 
     * @param num The number of bytes to be read.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getFileCompressed(String path, int pos, int num, java.util.Map<String, String> __ctx, Callback_MQInterface_getFileCompressed __cb);

    /**
     * Read the specified file. If the read operation fails, the
     * operation throws {@link FileAccessException}. This operation may only
     * return fewer bytes than requested in case there was an
     * end-of-file condition.
     * 
     * @param __result The asynchronous result object.
     * @return A sequence containing the compressed file contents.
     * 
     **/
    public byte[] end_getFileCompressed(Ice.IntHolder iResult, Ice.AsyncResult __result);

    /**
     * Read the specified file. If the read operation fails, the
     * operation throws {@link FileAccessException}. This operation may only
     * return fewer bytes than requested in case there was an
     * end-of-file condition.
     * 
     * @param __cb The callback object for the operation.
     * @param path The pathname (relative to the data directory) for
     * the file to be read.
     * 
     * @param pos The file offset at which to begin reading.
     * 
     * @param num The number of bytes to be read.
     * 
     **/
    public boolean getFileCompressed_async(AMI_MQInterface_getFileCompressed __cb, String path, int pos, int num);

    /**
     * Read the specified file. If the read operation fails, the
     * operation throws {@link FileAccessException}. This operation may only
     * return fewer bytes than requested in case there was an
     * end-of-file condition.
     * 
     * @param __cb The callback object for the operation.
     * @param path The pathname (relative to the data directory) for
     * the file to be read.
     * 
     * @param pos The file offset at which to begin reading.
     * 
     * @param num The number of bytes to be read.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getFileCompressed_async(AMI_MQInterface_getFileCompressed __cb, String path, int pos, int num, java.util.Map<String, String> __ctx);

    public int UploadFile(String sFile, int pos, int num, byte[] filecontent);

    public int UploadFile(String sFile, int pos, int num, byte[] filecontent, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_UploadFile(String sFile, int pos, int num, byte[] filecontent);

    public Ice.AsyncResult begin_UploadFile(String sFile, int pos, int num, byte[] filecontent, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_UploadFile(String sFile, int pos, int num, byte[] filecontent, Ice.Callback __cb);

    public Ice.AsyncResult begin_UploadFile(String sFile, int pos, int num, byte[] filecontent, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_UploadFile(String sFile, int pos, int num, byte[] filecontent, Callback_MQInterface_UploadFile __cb);

    public Ice.AsyncResult begin_UploadFile(String sFile, int pos, int num, byte[] filecontent, java.util.Map<String, String> __ctx, Callback_MQInterface_UploadFile __cb);

    public int end_UploadFile(Ice.AsyncResult __result);

    public boolean UploadFile_async(AMI_MQInterface_UploadFile __cb, String sFile, int pos, int num, byte[] filecontent);

    public boolean UploadFile_async(AMI_MQInterface_UploadFile __cb, String sFile, int pos, int num, byte[] filecontent, java.util.Map<String, String> __ctx);
}
